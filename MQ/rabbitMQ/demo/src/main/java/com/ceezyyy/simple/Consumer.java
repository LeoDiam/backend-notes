package com.ceezyyy.simple;

import com.ceezyyy.util.ConnectionUtil;
import com.rabbitmq.client.*;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

public class Consumer {

    public static void main(String[] args) throws IOException, TimeoutException {

        // get connection from ConnectionUtil
        Connection connection = new ConnectionUtil().createConnection();

        // create channel
        Channel channel = connection.createChannel();

        /*
         * declare queue
         *
         * @param queue the name of the queue
         * @param durable true if we are declaring a durable queue (the queue will survive a server restart)
         * @param exclusive true if we are declaring an exclusive queue (restricted to this connection)
         * @param autoDelete true if we are declaring an autodelete queue (server will delete it when no longer in use)
         * @param arguments other properties (construction arguments) for the queue
         * */
        channel.queueDeclare(Producer.QUEUE_NAME, true, false, false, null);

        // create consumer
        DefaultConsumer defaultConsumer = new DefaultConsumer(channel) {
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
                System.out.println("DeliveryTag: " + envelope.getDeliveryTag());
                System.out.println("Exchange: " + envelope.getExchange());
                System.out.println("RoutingKey: " + envelope.getRoutingKey());
                System.out.println(new String(body));
            }
        };

        /*
         * basic consumer
         *
         * Start a non-nolocal, non-exclusive consumer, with
         * a server-generated consumerTag.
         * @param queue the name of the queue
         * @param autoAck true if the server should consider messages
         * acknowledged once delivered; false if the server should expect
         * explicit acknowledgements
         * @param callback an interface to the consumer object
         * @return the consumerTag generated by the server
         * */
        channel.basicConsume(Producer.QUEUE_NAME, true, defaultConsumer);
        System.out.println("Waiting for message");

    }
}
